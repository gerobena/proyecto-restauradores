name: Retail ETL mensual

on:
  schedule:
    # Día 2 de cada mes a las 04:00 UTC (ajústalo si quieres)
    - cron: "0 4 2 * *"
  workflow_dispatch: {}  # permite ejecutarlo manualmente desde Actions

jobs:
  etl:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Instalamos LibreOffice + rclone oficial (última versión)
      - name: Install system deps (LibreOffice) and latest rclone
        run: |
          sudo apt-get update
          sudo apt-get install -y libreoffice curl unzip
          # Instalar rclone estable más reciente (script oficial)
          curl -fsSL https://rclone.org/install.sh | sudo bash
          rclone --version

      # Restaurar rclone.conf desde secret Base64 y exportar RCLONE_CONFIG
      - name: Restore rclone config from secret (Base64)
        env:
          RCLONE_CONF_B64: ${{ secrets.RCLONE_CONF_B64 }}
        run: |
          mkdir -p ~/.config/rclone
          # Decodificar sin introducir saltos extra
          printf "%s" "$RCLONE_CONF_B64" | base64 --decode > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          # Exportar para pasos siguientes
          echo "RCLONE_CONFIG=$HOME/.config/rclone/rclone.conf" >> $GITHUB_ENV

      # Comprobaciones de rclone / remoto onedrive
      - name: Sanity check rclone remote
        run: |
          rclone --version
          echo "== rclone config (token oculto) =="
          rclone config show onedrive | sed -E 's/(token = ).*/\1***MASKED***/'
          echo "== rclone about onedrive =="
          rclone about onedrive: || true
          echo "== Raíz del OneDrive =="
          rclone lsd onedrive: || true
          echo "== Contenido de la carpeta de ingesta =="
          rclone ls onedrive:Restauradores_Ingesta_Reportes --max-depth 1 || true

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Asegura papermill por si no estuviera en requirements.txt
          python - << 'PY'
          import importlib, sys, subprocess
          try:
            importlib.import_module("papermill")
          except ImportError:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "papermill"])
          PY

      # Copiar archivos desde OneDrive a data/raw con logs detallados
      - name: Sync OneDrive -> data/raw
        run: |
          mkdir -p data/raw
          rclone copy onedrive:Restauradores_Ingesta_Reportes data/raw \
            --include "ventas_*.xls" \
            --include "ventas_*.xlsx" \
            --include "compras_*.xls" \
            --include "compras_*.xlsx" \
            --include "inventario_*.xls" \
            --include "inventario_*.xlsx" \
            --create-empty-src-dirs --checkers 4 --transfers 4 \
            --retries 5 --retries-sleep 10s --stats 5s -vv
          echo "== Descargado a data/raw =="
          ls -lah data/raw || true

      # Ejecutar el notebook y generar data/summary.parquet
      - name: Run notebook with Papermill (produce data/summary.parquet)
        run: |
          papermill notebooks/analisis.ipynb notebooks/analisis_output.ipynb \
            -p RAW_DIR data/raw \
            -p OUTPUT_PARQUET data/summary.parquet

      # Verificar que el parquet exista
      - name: Check summary exists
        run: |
          test -f data/summary.parquet && ls -lh data/summary.parquet

      # Commit & push del parquet si cambió
      - name: Commit & push updated summary
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: actualizar summary.parquet"
          file_pattern: data/summary.parquet

